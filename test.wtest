import TP1.*

test "Los detinos mas importantes de barrileteCosmico son Garlics Sea y Last Toninas" {
    assert.equals(#{garlicSSea, lastToninas} , barrileteCosmico.destinosMasImportantes())
}

test "Despues de aplicarle un 25% de descuento a Last Toninas el precio es 2625"{
    lastToninas.aplicarDescuento(25)

    assert.equals(2625, lastToninas.precio())
}

test "Despues de aplicarle un 25% de descuento a Last Toninas tiene un certificado de descuento en su equipaje"{
    //assert.that(lastToninas.equipaje().contains("Certificado de descuento"))
    barrileteCosmico.aplicarDescuento(25)
    assert.that(lastToninas.equipaje().contains("Certificado de descuento"))
}

test "Silver s Sea no es un destino peligroso" {
    assert.notThat(silverSSea.esPeligroso())
}

test "Luego de aplicar un descuento de 15% a todos los destinos todos poseen certificado de descuento"{
    barrileteCosmico.aplicarDescuento(15)
    assert.that(barrileteCosmico.destinos().all({destino => destino.equipaje().contains("Certificado de descuento")}))
}

test "Con un descuento de 15% aplicado a todos los precios son: garlicSSea = 2125, silverSSea = 1147.5, lastToninas = 2975 y goodAirs = 1275"{
    barrileteCosmico.aplicarDescuento(15)

    assert.equals(2125, garlicSSea.precio())
    assert.equals(1147.5, silverSSea.precio())
    assert.equals(2975, lastToninas.precio())
    assert.equals(1275, goodAirs.precio())
}

test "Last Toninas es un destino peligroso"{
    assert.that(lastToninas.esPeligroso())
}

test "Barrilete cosmico es una empresa extrema"{
    assert.that(barrileteCosmico.esExtrema())
}

test "Los destinos de Barrilete Cosmico son: Last Toninas, Garlic s sea, Good Airs y Silver s Sea."{
    assert.equals(#{garlicSSea, silverSSea, lastToninas, goodAirs} , barrileteCosmico.destinos())
}

/*******************/

test "PHarri al viajar a silverSSea tiene millas equivalentes a 415km"{
 const colectivo = new Micro(0,10)
	var unViaje = new Viaje(pabloHari, silverSSea, colectivo)
	pabloHari.viajar(unViaje)
	assert.equals(415, pabloHari.kilometros())
}  

test "PHarri viaja a Silver´s Sea (silverSSea) y se agrega el destino a su historial"{
	const colectivo = new Micro(0,10)
	var unViaje = new Viaje(pabloHari, silverSSea, colectivo)
	pabloHari.viajar(unViaje)
	assert.that(pabloHari.lugaresConocidos().contains(silverSSea))
}

test "PHarri viaja a Silver´s Sea (silverSSea) y en su cuenta tiene 4500$"{
	const colectivo = new Micro(0,10)
	var unViaje = new Viaje(pabloHari, silverSSea, colectivo)
	pabloHari.viajar(unViaje)
	assert.equals(4500, pabloHari.saldo())
} 

test "La distancia entre la localidad de origen de pabloHari y silverSSea es 415km"{
    assert.equals(pabloHari.distanciaALocalidad(silverSSea), 415)
}

test "Luego de que PHarri viaje en colectivo a silverS Sea, su localidad de origen es silvers Sea"{
    const colectivo = new Micro(0,10)
	var unViaje = new Viaje(pabloHari, silverSSea, colectivo)
	pabloHari.viajar(unViaje)
    assert.equals(pabloHari.localidadDeOrigen(), silverSSea)
}

test "Cuando barrilete cosmico arma un viaje hacia garlicSSea para PHarri, su saldo es 60"{
    const colectivo = new Micro(0,10)
    barrileteCosmico.agregarTransporte(colectivo)
	pabloHari.saldo(6000)
    barrileteCosmico.armarViaje(pabloHari, garlicSSea)
    assert.equals(pabloHari.saldo(), 60)
}

test "Luego de que barrileteCosmico arme un viaje hacia silverSSea para pHarri, su localidad de origen es silverSSea"{
    const colectivo = new Micro(0,10)
    barrileteCosmico.agregarTransporte(colectivo)
	pabloHari.saldo(6000)
    barrileteCosmico.armarViaje(pabloHari, silverSSea)
    assert.equals(pabloHari.localidadDeOrigen(), silverSSea)
}

test "Luego de que barrileteCosmico arme un viaje hacia lastToninas para pHarri, su localidad de origen es lastToninas"{
    const colectivo = new Micro(0,10)
    barrileteCosmico.agregarTransporte(colectivo)
	pabloHari.saldo(10000)
    barrileteCosmico.armarViaje(pabloHari, lastToninas)
    assert.equals(pabloHari.localidadDeOrigen(), lastToninas)
}
///////////////////
test "Luego de setear las turbinas de un avion en [1,2,1000], su costo deberia ser 10003"{
	const avion = new Avion(1,[1,2,10000])
	barrileteCosmico.agregarTransporte(avion)
	assert.equals(avion.costo(),10003)
}

test "El costo de un tren deberia ser 2300 *0.62"{
	const tren = new Tren(2)
	barrileteCosmico.agregarTransporte(tren)
	assert.equals(tren.costo(),1426)
}

test "El costo de un micro se setea en 700 y se verifica"{
	const micro = new Micro(3,700)
	barrileteCosmico.agregarTransporte(micro)
	assert.equals(micro.costo(),700)
}

test "Luego de setear la probabilidad de choque en 0.5 del barco, su costo deberia ser 500"{
	const barco = new Barco(4,0.5)
	barrileteCosmico.agregarTransporte(barco)
	assert.equals(barco.costo(),500)
}

test "Luego de setear la tardanza del avion en 1, del tren en 2, del micro en 3 y del barco en 4, 
	verificar que el metodo de transporte elegido por pabloHari sea el avion"{
	const avion = new Avion(1,[1,2,10000])
	barrileteCosmico.agregarTransporte(avion)
	const tren = new Tren(2)
	barrileteCosmico.agregarTransporte(tren)
	const micro = new Micro(3, 700)
	barrileteCosmico.agregarTransporte(micro)
	const barco = new Barco(4,0.5)
	barrileteCosmico.agregarTransporte(barco)
	pabloHari.perfil(empresarial)
	assert.equals(pabloHari.elegirTransporte(barrileteCosmico.transportes()),avion)
}

test "Luego de setear la tardanza del avion en 1, del tren en 2, del micro en 3 y del barco en 4, 
	y cambiando el perfil de pabloHari a Estudiantil, verificar que el transporte elegido sea el Tren"{
	const avion = new Avion(1,[1,2,10000])
	barrileteCosmico.agregarTransporte(avion)
	const tren = new Tren(2)
	barrileteCosmico.agregarTransporte(tren)
	const micro = new Micro(3, 700)
	barrileteCosmico.agregarTransporte(micro)
	const barco = new Barco(4,0.5)
	barrileteCosmico.agregarTransporte(barco)
	pabloHari.perfil(estudiantil)
	assert.equals(pabloHari.elegirTransporte(barrileteCosmico.transportes()),tren)
}

test "Ciudad historica no es peligrosa cuando el pasajero tiene Seguro de asistencia al viajero"{
	const ciudadHistorica = new CiudadHistorica(2500,#{"Seguro de asistencia al viajero"}, 100, 1)
	assert.that(ciudadHistorica.esPeligroso())
}

test "Ciudad historica al tener 3 museos y su costo ser 2500, es importante"{
	const ciudadHistorica = new CiudadHistorica(2500,#{"Seguro de asistencia al viajero"}, 100, 3)
	assert.that(ciudadHistorica.esImportante())
}